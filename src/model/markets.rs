use serde::{Deserialize, Serialize};

/// An [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
#[rustfmt::skip]
pub enum Market {
	AD, AE, AG, AL, AM, AO, AR, AT, AU, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BN, BO, BR, BS, BT,
	BW, BY, BZ, CA, CD, CG, CH, CI, CL, CM, CO, CR, CV, CW, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE,
	EG, ES, ET, FI, FJ, FM, FR, GA, GB, GD, GE, GH, GM, GN, GQ, GR, GT, GW, GY, HK, HN, HR, HT, HU,
	ID, IE, IL, IN, IQ, IS, IT, JM, JO, JP, KE, KG, KH, KI, KM, KN, KR, KW, KZ, LA, LB, LC, LI, LK,
	LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MG, MH, MK, ML, MN, MO, MR, MT, MU, MV, MW, MX, MY, MZ,
	NA, NE, NG, NI, NL, NO, NP, NR, NZ, OM, PA, PE, PG, PH, PK, PL, PR, PS, PT, PW, PY, QA, RO, RS,
	RW, SA, SB, SC, SE, SG, SI, SK, SL, SM, SN, SR, ST, SV, SZ, TD, TG, TH, TJ, TL, TN, TO, TR, TT,
	TV, TW, TZ, UA, UG, US, UY, UZ, VC, VE, VN, VU, WS, XK, ZA, ZM, ZW,
}

impl Market {
    pub fn country_name(&self) -> &'static str {
        match self {
            Self::AD => "Andorra",
            Self::AE => "United Arab Emirates",
            Self::AG => "Antigua and Barbuda",
            Self::AL => "Albania",
            Self::AM => "Armenia",
            Self::AO => "Angola",
            Self::AR => "Argentina",
            Self::AT => "Austria",
            Self::AU => "Australia",
            Self::AZ => "Azerbaijan",
            Self::BA => "Bosnia and Herzegovina",
            Self::BB => "Barbados",
            Self::BD => "Bangladesh",
            Self::BE => "Belgium",
            Self::BF => "Burkina Faso",
            Self::BG => "Bulgaria",
            Self::BH => "Bahrain",
            Self::BI => "Burundi",
            Self::BJ => "Benin",
            Self::BN => "Brunei Darussalam",
            Self::BO => "Bolivia",
            Self::BR => "Brazil",
            Self::BS => "Bahamas",
            Self::BT => "Bhutan",
            Self::BW => "Botswana",
            Self::BY => "Belarus",
            Self::BZ => "Belize",
            Self::CA => "Canada",
            Self::CD => "Democratic Republic of the Congo",
            Self::CG => "Congo",
            Self::CH => "Switzerland",
            Self::CI => "Côte d'Ivoire",
            Self::CL => "Chile",
            Self::CM => "Cameroon",
            Self::CO => "Colombia",
            Self::CR => "Costa Rica",
            Self::CV => "Cape Verde",
            Self::CW => "Curaçao",
            Self::CY => "Cyprus",
            Self::CZ => "Czechia",
            Self::DE => "Germany",
            Self::DJ => "Djibouti",
            Self::DK => "Denmark",
            Self::DM => "Dominica",
            Self::DO => "Dominican Republic",
            Self::DZ => "Algeria",
            Self::EC => "Ecuador",
            Self::EE => "Estonia",
            Self::EG => "Egypt",
            Self::ES => "Spain",
            Self::ET => "Ethiopia",
            Self::FI => "Finland",
            Self::FJ => "Fiji",
            Self::FM => "Micronesia",
            Self::FR => "France",
            Self::GA => "Gabon",
            Self::GB => "United Kingdom",
            Self::GD => "Grenada",
            Self::GE => "Georgia",
            Self::GH => "Ghana",
            Self::GM => "Gambia",
            Self::GN => "Guinea",
            Self::GQ => "Equatorial Guinea",
            Self::GR => "Greece",
            Self::GT => "Guatemala",
            Self::GW => "Guinea-Bissau",
            Self::GY => "Guyana",
            Self::HK => "Hong Kong",
            Self::HN => "Honduras",
            Self::HR => "Croatia",
            Self::HT => "Haiti",
            Self::HU => "Hungary",
            Self::ID => "Indonesia",
            Self::IE => "Ireland",
            Self::IL => "Israel",
            Self::IN => "India",
            Self::IQ => "Iraq",
            Self::IS => "Iceland",
            Self::IT => "Italy",
            Self::JM => "Jamaica",
            Self::JO => "Jordan",
            Self::JP => "Japan",
            Self::KE => "Kenya",
            Self::KG => "Kyrgyzstan",
            Self::KH => "Cambodia",
            Self::KI => "Kiribati",
            Self::KM => "Comoros",
            Self::KN => "Saint Kitts and Nevis",
            Self::KR => "South Korea",
            Self::KW => "Kuwait",
            Self::KZ => "Kazakhstan",
            Self::LA => "Laos",
            Self::LB => "Lebanon",
            Self::LC => "Saint Lucia",
            Self::LI => "Liechtenstein",
            Self::LK => "Sri Lanka",
            Self::LR => "Liberia",
            Self::LS => "Lesotho",
            Self::LT => "Lithuania",
            Self::LU => "Luxembourg",
            Self::LV => "Latvia",
            Self::LY => "Libya",
            Self::MA => "Morocco",
            Self::MC => "Monaco",
            Self::MD => "Moldova",
            Self::ME => "Montenegro",
            Self::MG => "Madagascar",
            Self::MH => "Marshall Islands",
            Self::MK => "North Macedonia",
            Self::ML => "Mali",
            Self::MN => "Mongolia",
            Self::MO => "Macao",
            Self::MR => "Mauritania",
            Self::MT => "Malta",
            Self::MU => "Mauritius",
            Self::MV => "Maldives",
            Self::MW => "Malawi",
            Self::MX => "Mexico",
            Self::MY => "Malaysia",
            Self::MZ => "Mozambique",
            Self::NA => "Namibia",
            Self::NE => "Niger",
            Self::NG => "Nigeria",
            Self::NI => "Nicaragua",
            Self::NL => "Netherlands",
            Self::NO => "Norway",
            Self::NP => "Nepal",
            Self::NR => "Nauru",
            Self::NZ => "New Zealand",
            Self::OM => "Oman",
            Self::PA => "Panama",
            Self::PE => "Peru",
            Self::PG => "Papua New Guinea",
            Self::PH => "Philippines",
            Self::PK => "Pakistan",
            Self::PL => "Poland",
            Self::PR => "Puerto Rico",
            Self::PS => "Palestine",
            Self::PT => "Portugal",
            Self::PW => "Palau",
            Self::PY => "Paraguay",
            Self::QA => "Qatar",
            Self::RO => "Romania",
            Self::RS => "Serbia",
            Self::RW => "Rwanda",
            Self::SA => "Saudi Arabia",
            Self::SB => "Solomon Islands",
            Self::SC => "Seychelles",
            Self::SE => "Sweden",
            Self::SG => "Singapore",
            Self::SI => "Slovenia",
            Self::SK => "Slovakia",
            Self::SL => "Sierra Leone",
            Self::SM => "San Marino",
            Self::SN => "Senegal",
            Self::SR => "Suriname",
            Self::ST => "São Tomé and Príncipe",
            Self::SV => "El Salvador",
            Self::SZ => "Eswatini",
            Self::TD => "Chad",
            Self::TG => "Togo",
            Self::TH => "Thailand",
            Self::TJ => "Tajikistan",
            Self::TL => "Timor-Leste",
            Self::TN => "Tunisia",
            Self::TO => "Tonga",
            Self::TR => "Turkey",
            Self::TT => "Trinidad and Tobago",
            Self::TV => "Tuvalu",
            Self::TW => "Taiwan",
            Self::TZ => "Tanzania",
            Self::UA => "Ukraine",
            Self::UG => "Uganda",
            Self::US => "United States",
            Self::UY => "Uruguay",
            Self::UZ => "Uzbekistan",
            Self::VC => "Saint Vincent and the Grenadines",
            Self::VE => "Venezuela",
            Self::VN => "Vietnam",
            Self::VU => "Vanuatu",
            Self::WS => "Samoa",
            Self::XK => "Kosovo",
            Self::ZA => "South Africa",
            Self::ZM => "Zambia",
            Self::ZW => "Zimbabwe",
        }
    }
}

/// List of markets where Spotify is available.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct Markets {
    pub markets: Vec<Market>,
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn markets() {
        let json = r#"
        {
			"markets": [
				"AD", "AE", "AG", "AL", "AM", "AO", "AR", "AT", "AU", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BN", "BO", "BR", "BS", "BT",
				"BW", "BY", "BZ", "CA", "CD", "CG", "CH", "CI", "CL", "CM", "CO", "CR", "CV", "CW", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE",
				"EG", "ES", "ET", "FI", "FJ", "FM", "FR", "GA", "GB", "GD", "GE", "GH", "GM", "GN", "GQ", "GR", "GT", "GW", "GY", "HK", "HN", "HR", "HT", "HU",
				"ID", "IE", "IL", "IN", "IQ", "IS", "IT", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KR", "KW", "KZ", "LA", "LB", "LC", "LI", "LK",
				"LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MG", "MH", "MK", "ML", "MN", "MO", "MR", "MT", "MU", "MV", "MW", "MX", "MY", "MZ",
				"NA", "NE", "NG", "NI", "NL", "NO", "NP", "NR", "NZ", "OM", "PA", "PE", "PG", "PH", "PK", "PL", "PR", "PS", "PT", "PW", "PY", "QA", "RO", "RS",
				"RW", "SA", "SB", "SC", "SE", "SG", "SI", "SK", "SL", "SM", "SN", "SR", "ST", "SV", "SZ", "TD", "TG", "TH", "TJ", "TL", "TN", "TO", "TR", "TT",
				"TV", "TW", "TZ", "UA", "UG", "US", "UY", "UZ", "VC", "VE", "VN", "VU", "WS", "XK", "ZA", "ZM", "ZW"
			]
        }
        "#;

        crate::test::assert_deserialized!(Markets, json);
    }
}
